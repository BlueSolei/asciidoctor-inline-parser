# Autogenerated from a Treetop grammar. Edits may be lost.


module AsciidoctorBtnGrammar
  include Treetop::Runtime

  def root
    @root ||= :btn
  end

  module Btn0
    def btn_content
      elements[1]
    end

  end

  def _nt_btn
    start_index = index
    if node_cache[:btn].has_key?(index)
      cached = node_cache[:btn][index]
      if cached
        node_cache[:btn][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('btn:[', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'btn:[\'')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_btn_content
      s0 << r2
      if r2
        if (match_len = has_terminal?(']', false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('\']\'')
          r3 = nil
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(Btn,input, i0...index, s0)
      r0.extend(Btn0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:btn][start_index] = r0

    r0
  end

  def _nt_btn_content
    start_index = index
    if node_cache[:btn_content].has_key?(index)
      cached = node_cache[:btn_content][index]
      if cached
        node_cache[:btn_content][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if (match_len = has_terminal?('\]', false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'\\]\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r1 = r2
      else
        if has_terminal?(@regexps[gr = '\A[^\\]]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[^\\]]')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(BtnContent,input, i0...index, s0)
    end

    node_cache[:btn_content][start_index] = r0

    r0
  end

end

class AsciidoctorBtnGrammarParser < Treetop::Runtime::CompiledParser
  include AsciidoctorBtnGrammar
end

