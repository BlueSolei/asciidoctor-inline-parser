# Autogenerated from a Treetop grammar. Edits may be lost.


module AsciidoctorPassthroughGrammar
  include Treetop::Runtime

  def root
    @root ||= :escaped_passthrough_inline_macro
  end

  module EscapedPassthroughInlineMacro0
    def passthrough_inline_macro
      elements[1]
    end
  end

  def _nt_escaped_passthrough_inline_macro
    start_index = index
    if node_cache[:escaped_passthrough_inline_macro].has_key?(index)
      cached = node_cache[:escaped_passthrough_inline_macro][index]
      if cached
        node_cache[:escaped_passthrough_inline_macro][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('\\', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'\\\\\'')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_passthrough_inline_macro
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(EscapedPassthroughInlineMacro,input, i0...index, s0)
      r0.extend(EscapedPassthroughInlineMacro0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:escaped_passthrough_inline_macro][start_index] = r0

    r0
  end

  module PassthroughInlineMacro0
    def passthrough_inline_macro_subs
      elements[1]
    end

    def passthrough_inline_macro_content
      elements[3]
    end

  end

  def _nt_passthrough_inline_macro
    start_index = index
    if node_cache[:passthrough_inline_macro].has_key?(index)
      cached = node_cache[:passthrough_inline_macro][index]
      if cached
        node_cache[:passthrough_inline_macro][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('pass:', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'pass:\'')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_passthrough_inline_macro_subs
      s0 << r2
      if r2
        if (match_len = has_terminal?('[', false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('\'[\'')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_passthrough_inline_macro_content
          s0 << r4
          if r4
            if (match_len = has_terminal?(']', false, index))
              r5 = true
              @index += match_len
            else
              terminal_parse_failure('\']\'')
              r5 = nil
            end
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(PassthroughInlineMacro,input, i0...index, s0)
      r0.extend(PassthroughInlineMacro0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:passthrough_inline_macro][start_index] = r0

    r0
  end

  def _nt_passthrough_inline_macro_subs
    start_index = index
    if node_cache[:passthrough_inline_macro_subs].has_key?(index)
      cached = node_cache[:passthrough_inline_macro_subs][index]
      if cached
        node_cache[:passthrough_inline_macro_subs][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if (match_len = has_terminal?(',', false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('\',\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r1 = r2
      else
        r3 = _nt_passthrough_inline_macro_sub
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(PassthroughInlineMacroSubs,input, i0...index, s0)

    node_cache[:passthrough_inline_macro_subs][start_index] = r0

    r0
  end

  def _nt_passthrough_inline_macro_sub
    start_index = index
    if node_cache[:passthrough_inline_macro_sub].has_key?(index)
      cached = node_cache[:passthrough_inline_macro_sub][index]
      if cached
        node_cache[:passthrough_inline_macro_sub][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if (match_len = has_terminal?('normal', false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'normal\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r1 = r2
      else
        if (match_len = has_terminal?('none', false, index))
          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'none\'')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r1 = r3
        else
          if (match_len = has_terminal?('specialcharacters', false, index))
            r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'specialcharacters\'')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r1 = r4
          else
            if (match_len = has_terminal?('specialchars', false, index))
              r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'specialchars\'')
              r5 = nil
            end
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r1 = r5
            else
              if (match_len = has_terminal?('quotes', false, index))
                r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('\'quotes\'')
                r6 = nil
              end
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r1 = r6
              else
                if (match_len = has_terminal?('attributes', false, index))
                  r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'attributes\'')
                  r7 = nil
                end
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r1 = r7
                else
                  if (match_len = has_terminal?('replacements', false, index))
                    r8 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('\'replacements\'')
                    r8 = nil
                  end
                  if r8
                    r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                    r1 = r8
                  else
                    if (match_len = has_terminal?('macros', false, index))
                      r9 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'macros\'')
                      r9 = nil
                    end
                    if r9
                      r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                      r1 = r9
                    else
                      if (match_len = has_terminal?('post_replacements', false, index))
                        r10 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                        @index += match_len
                      else
                        terminal_parse_failure('\'post_replacements\'')
                        r10 = nil
                      end
                      if r10
                        r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                        r1 = r10
                      else
                        if (match_len = has_terminal?('verbatim', false, index))
                          r11 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                          @index += match_len
                        else
                          terminal_parse_failure('\'verbatim\'')
                          r11 = nil
                        end
                        if r11
                          r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                          r1 = r11
                        else
                          if (match_len = has_terminal?('c', false, index))
                            r12 = true
                            @index += match_len
                          else
                            terminal_parse_failure('\'c\'')
                            r12 = nil
                          end
                          if r12
                            r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
                            r1 = r12
                          else
                            if (match_len = has_terminal?('q', false, index))
                              r13 = true
                              @index += match_len
                            else
                              terminal_parse_failure('\'q\'')
                              r13 = nil
                            end
                            if r13
                              r13 = SyntaxNode.new(input, (index-1)...index) if r13 == true
                              r1 = r13
                            else
                              if (match_len = has_terminal?('a', false, index))
                                r14 = true
                                @index += match_len
                              else
                                terminal_parse_failure('\'a\'')
                                r14 = nil
                              end
                              if r14
                                r14 = SyntaxNode.new(input, (index-1)...index) if r14 == true
                                r1 = r14
                              else
                                if (match_len = has_terminal?('r', false, index))
                                  r15 = true
                                  @index += match_len
                                else
                                  terminal_parse_failure('\'r\'')
                                  r15 = nil
                                end
                                if r15
                                  r15 = SyntaxNode.new(input, (index-1)...index) if r15 == true
                                  r1 = r15
                                else
                                  if (match_len = has_terminal?('m', false, index))
                                    r16 = true
                                    @index += match_len
                                  else
                                    terminal_parse_failure('\'m\'')
                                    r16 = nil
                                  end
                                  if r16
                                    r16 = SyntaxNode.new(input, (index-1)...index) if r16 == true
                                    r1 = r16
                                  else
                                    if (match_len = has_terminal?('p', false, index))
                                      r17 = true
                                      @index += match_len
                                    else
                                      terminal_parse_failure('\'p\'')
                                      r17 = nil
                                    end
                                    if r17
                                      r17 = SyntaxNode.new(input, (index-1)...index) if r17 == true
                                      r1 = r17
                                    else
                                      @index = i1
                                      r1 = nil
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(PassthroughInlineMacroSub,input, i0...index, s0)
    end

    node_cache[:passthrough_inline_macro_sub][start_index] = r0

    r0
  end

  def _nt_passthrough_inline_macro_content
    start_index = index
    if node_cache[:passthrough_inline_macro_content].has_key?(index)
      cached = node_cache[:passthrough_inline_macro_content][index]
      if cached
        node_cache[:passthrough_inline_macro_content][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if (match_len = has_terminal?('\]', false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'\\]\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r1 = r2
      else
        if has_terminal?(@regexps[gr = '\A[^\\]]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[^\\]]')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(PassthroughInlineMacroContent,input, i0...index, s0)

    node_cache[:passthrough_inline_macro_content][start_index] = r0

    r0
  end

  module PassthroughTriplePlus0
    def passthrough_triple_plus_content
      elements[1]
    end

  end

  def _nt_passthrough_triple_plus
    start_index = index
    if node_cache[:passthrough_triple_plus].has_key?(index)
      cached = node_cache[:passthrough_triple_plus][index]
      if cached
        node_cache[:passthrough_triple_plus][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('+++', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'+++\'')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_passthrough_triple_plus_content
      s0 << r2
      if r2
        if (match_len = has_terminal?('+++', false, index))
          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'+++\'')
          r3 = nil
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(PassthroughTriplePlus,input, i0...index, s0)
      r0.extend(PassthroughTriplePlus0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:passthrough_triple_plus][start_index] = r0

    r0
  end

  def _nt_passthrough_triple_plus_content
    start_index = index
    if node_cache[:passthrough_triple_plus_content].has_key?(index)
      cached = node_cache[:passthrough_triple_plus_content][index]
      if cached
        node_cache[:passthrough_triple_plus_content][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[^+]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[^+]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(PassthroughTriplePlusContent,input, i0...index, s0)
    end

    node_cache[:passthrough_triple_plus_content][start_index] = r0

    r0
  end

end

class AsciidoctorPassthroughGrammarParser < Treetop::Runtime::CompiledParser
  include AsciidoctorPassthroughGrammar
end

